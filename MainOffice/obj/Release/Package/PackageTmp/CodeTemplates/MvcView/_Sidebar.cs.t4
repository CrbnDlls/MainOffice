<#@ template language="C#" HostSpecific="True" Debug="True"#>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
<# //Debugger.Launch(); 
#>
@model <#= ViewDataTypeName #>Filter
@using MainOffice.App_LocalResources;
@using MainOffice.Helpers
@{
    var metaData = ModelMetadataProviders
    .Current
    .GetMetadataForType(null, typeof(<#= ViewDataTypeName #>));
    Dictionary<string, ModelMetadata> properties = metaData.Properties.ToDictionary(p => p.PropertyName);
}    

<div class="sidebar-header text-center">
    <h6>@GlobalRes.FilterTitle</h6>
</div>

@using (Ajax.BeginForm("Filter", null, new AjaxOptions { OnSuccess = "onSuccessFilter" },new { @class = "needs-validation" }))
{

    <div class="sidebar-body">
        <div class="btn-group btn-group-toggle btn-group-sm special">
            <input type="submit" value="@GlobalRes.Apply" class="btn btn-success" />
        </div>
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
<#
int Count = 3;
List<string> Done = new List<string>();
PropertyInfo[] Properties = T4Helpers.GetProperties(ViewDataTypeShortName + "Filter");
foreach (PropertyInfo property in Properties) {
   		
				if (property.Name.Length > 4 && property.Name.Substring(property.Name.Length - 4,4) == "From")
                { 
					continue; 
			 	}
				if (property.Name.Length > 2 && property.Name.Substring(property.Name.Length - 2,2) == "To")
                {
					continue; 
				}
				if (property.Name.Length > 7 && property.Name.Substring(property.Name.Length - 7,7) == "Buttons")
                {  #>
					@Html.Label(properties["<#= property.Name.Substring(0,property.Name.Length - 7) #>"].DisplayName, new { @for = "<#= property.Name.Substring(0,property.Name.Length - 7) #>" })
					@Html.ButtonsFor(model => model.<#= property.Name #>, new { htmlAttributes = new { @class = "form-control" } })
<#					try
					{
						PropertyInfo nextProperty = Properties.First(p => p.Name == (property.Name.Substring(0,property.Name.Length - 7) + "From"));
#>						<div class="form-group-sm form-row align-items-center">
							<div class="col">
								@Html.LabelFor(model => model.<#= nextProperty.Name #>)
							</div>
							<div class="col">
							@Html.EditorFor(model => model.<#= nextProperty.Name #>, new { htmlAttributes = new { @class = "form-control-sm text-box single-line" } })
							@Html.ValidationMessageFor(model => model.<#= nextProperty.Name #>, "", new { @class = "text-danger" })
							</div>
						</div>
<#						Done.Add(property.Name.Substring(0,property.Name.Length - 7) + "From");
						nextProperty = Properties.First(p => p.Name == (property.Name.Substring(0,property.Name.Length - 7) + "To"));
#>						<div class="form-group-sm form-row align-items-center">
							<div class="col">
								@Html.LabelFor(model => model.<#= nextProperty.Name #>)
							</div>
							<div class="col">
							@Html.EditorFor(model => model.<#= nextProperty.Name #>, new { htmlAttributes = new { @class = "form-control-sm text-box single-line" } })
							@Html.ValidationMessageFor(model => model.<#= nextProperty.Name #>, "", new { @class = "text-danger" })
							</div>
						</div>
<#					}
					catch {}
#>
					<small class="form-text text-muted">@GlobalRes.FilterPrompt</small>
					<hr />
			<#	}
				if (property.Name.Length > 8 && property.Name.Substring(property.Name.Length - 8,8) == "Selected")
                { 
					var shortTypeName = ModelMetadata.RelatedEntities.First(e => e.ForeignKeyPropertyNames.Contains(property.Name.Substring(0,property.Name.Length - 8))).ShortTypeName;
				#>
					<div class="form-group">
						@Html.Label(properties["<#= shortTypeName #>"].DisplayName, new { @for = "<#= property.Name.Substring(0,property.Name.Length - 8) #>" })
						@Html.ListBoxFor(model => model.<#= property.Name #>, (MultiSelectList)ViewBag.<#= ModelMetadata.RelatedEntities.First(p => p.ForeignKeyPropertyNames.Contains(property.Name.Substring(0, property.Name.Length - 8))).EntitySetName #>SelectList, new { @class = "filter-select", data_actions_box = "true", multiple = "", data_dropdown_align_right = "true" })
					</div>
					<small class="form-text text-muted">@GlobalRes.FilterPrompt</small>
					<hr />
			<# 	}
		}
		foreach (PropertyInfo property in Properties) {
   		
				if (property.Name.Length > 4 && property.Name.Substring(property.Name.Length - 4,4) == "From")
                { 
					if (Done.Contains(property.Name))
                    {
						continue;
                    } #>
						@Html.Label(properties["<#= property.Name.Substring(0,property.Name.Length - 4) #>"].DisplayName, new { @for = "<#= property.Name.Substring(0,property.Name.Length - 4) #>" })
						<div class="form-group-sm form-row align-items-center">
							<div class="col">
								@Html.LabelFor(model => model.<#= property.Name #>)
							</div>
							<div class="col">
							@Html.EditorFor(model => model.<#= property.Name #>, new { htmlAttributes = new { @class = "form-control-sm text-box single-line" } })
							@Html.ValidationMessageFor(model => model.<#= property.Name #>, "", new { @class = "text-danger" })
							</div>
						</div>
<#						
						PropertyInfo nextProperty = Properties.First(p => p.Name == (property.Name.Substring(0,property.Name.Length - 4) + "To"));
#>						<div class="form-group-sm form-row align-items-center">
							<div class="col">
								@Html.LabelFor(model => model.<#= nextProperty.Name #>)
							</div>
							<div class="col">
							@Html.EditorFor(model => model.<#= nextProperty.Name #>, new { htmlAttributes = new { @class = "form-control-sm text-box single-line" } })
							@Html.ValidationMessageFor(model => model.<#= nextProperty.Name #>, "", new { @class = "text-danger" })
							</div>
						</div>
						<small class="form-text text-muted">@GlobalRes.FilterPrompt</small>
						<hr />
<#			 	}
				
}

#>
</div>
    <div class="sidebar-footer">
        <div class="btn-group btn-group-toggle btn-group-sm special">
            <input type="submit" value="@GlobalRes.Apply" class="btn btn-success" />
        </div>
    </div>
}
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>