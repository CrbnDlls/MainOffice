@model IEnumerable<MainOffice.Models.TemporaryBillModel>
@using MainOffice.App_LocalResources
@using MainOffice.Helpers

@{
    ViewBag.Title = Html.DisplayCustomForModel("GroupName");

    string sidebarHeight = ViewBag.TableHeight + "px";
}

<div class="wrapper">
    <nav id="sidebar" style="max-height:@sidebarHeight;overflow-y: scroll;"></nav>
    <div class="container-fluid body-content">
        <div id="content">
            <div class="toolbar">
                @Ajax.ActionLink("Счет - " + GlobalRes.Create, "Create", null, new AjaxOptions { UpdateTargetId = "modalform" }, new { @class = "btn btn-outline-success my-1", data_toggle = "modal", data_target = "#windowmodal" })
                <div class="border border-primary p-1 rounded d-inline-block">
                    <label for="in_date">Дата счетов в таблице</label>
                    <input id="in_date" type="date" class="text-box single-line" value="" />
                </div>
                <div class="border border-primary p-1 rounded d-inline-block">
                    @using (Html.BeginForm("Report", "CheckBills", FormMethod.Post,new { target = "_blank" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <label>Сформировать отчет с </label>
                        <input type="date" name="start" id="start" value="" />
                        <label> по </label>
                        <input type="date" name="end" id="end" value="" />
                        <input type="submit" value="Отчет" class="btn btn-outline-warning" />
                    }
                </div>
            </div>
            <table id="tablegrid"
                   data-search="true"
                   data-show-columns="true"
                   data-show-columns-toggle-all="true"
                   data-minimum-count-columns="2"
                   data-show-export="true"
                   data-locale="@GlobalRes.CurrentCulture"
                   data-height="@ViewBag.TableHeight"
                   data-sortable="true"
                   data-pagination="true"
                   data-page-list="[50, 70, 100, 400, All]"
                   data-page-size="400"
                   data-show-footer="true"
                   data-detail-view="true"
                   data-method="post"
                   data-unique-id="id"
                   data-click-to-select="true"
                   data-detail-formatter="detailFormatter"
                   data-toolbar=".toolbar"
                   data-query-params="queryParams"
                   data-custom-sort="customSort"
                   data-url="../CheckBills/data"
                   data-response-handler="responseHandler">
                <thead>
                    <tr>
                        <th title="@GlobalRes.Index" data-field="index" rowspan="2" data-valign="middle" data-halign="center" data-align="center" data-falign="center" data-footer-formatter="totalTextFormatter" data-formatter="runningFormatter">
                            @GlobalRes.IndexShort
                        </th>

                        <th title="Счета" colspan="7" data-valign="middle" data-halign="center" data-align="center">
                            Счета
                        </th>
                        <th data-field="operate" rowspan="2" data-valign="middle" data-halign="center" data-align="center" data-falign="center" data-formatter="operateFormatter">@GlobalRes.Actions</th>
                    </tr>
                    <tr>
                        <th data-title-tooltip="@Html.DisplayNameFor(model => model.BillNumber)" data-field="BillNumber" data-sortable="true" data-cell-style="cellStyle" data-valign="middle" data-halign="center" data-align="center" data-falign="center" data-footer-formatter="totalNameFormatter">
                            @Html.DisplayShortNameFor(model => model.BillNumber)
                        </th>
                        <th data-title-tooltip="@Html.DisplayNameFor(model => model.Date)" data-field="Date" data-type-name="Date" data-sortable="true" data-cell-style="cellStyle" data-valign="middle" data-halign="center" data-align="center" data-falign="center" data-footer-formatter="totalNameFormatter">
                            @Html.DisplayShortNameFor(model => model.Date)
                        </th>
                        <th data-title-tooltip="@Html.DisplayNameFor(model => model.StartTime)" data-field="StartTime" data-type-name="Date" data-sortable="true" data-cell-style="cellStyle" data-valign="middle" data-halign="center" data-align="center" data-falign="center" data-footer-formatter="totalNameFormatter">
                            @Html.DisplayShortNameFor(model => model.StartTime)
                        </th>
                        <th data-title-tooltip="@Html.DisplayNameFor(model => model.Salon)" data-field="Salon" data-sortable="true" data-cell-style="cellStyle" data-valign="middle" data-halign="center" data-align="center" data-falign="center" data-footer-formatter="totalNameFormatter">
                            @Html.DisplayShortNameFor(model => model.Salon)
                        </th>
                        <th data-title-tooltip="@Html.DisplayNameFor(model => model.Worker)" data-field="Worker" data-sortable="true" data-cell-style="cellStyle" data-valign="middle" data-halign="center" data-align="center" data-falign="center" data-footer-formatter="totalNameFormatter">
                            @Html.DisplayShortNameFor(model => model.Worker)
                        </th>
                        <th data-title-tooltip="@Html.DisplayNameFor(model => model.SellPrice)" data-field="SellPrice" data-sortable="true" data-cell-style="cellStyle" data-valign="middle" data-halign="center" data-align="center" data-falign="center" data-footer-formatter="totalPriceFormatter">
                            @Html.DisplayShortNameFor(model => model.SellPrice)
                        </th>
                        <th data-title-tooltip="@Html.DisplayNameFor(model => model.BO)" data-field="BO" data-sortable="true" data-cell-style="cellStyle" data-valign="middle" data-halign="center" data-align="center" data-falign="center" data-footer-formatter="totalNameFormatter">
                            @Html.DisplayShortNameFor(model => model.BO)
                        </th>
                    </tr>
                </thead>
            </table>
            <div id="windowmodal" class="modal fade" data-backdrop="static" tabindex="-1" role="dialog">
                <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg" role="document">
                    <div class="modal-content">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                        <div class="modal-body" id="modalform">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
{
    @Html.AntiForgeryToken()
}
@section scripts
{
    @{
        var locale = GlobalRes.CurrentCulture;
        var path = "/Scripts/i18n/defaults-" + locale.Replace("-", "_") + ".min.js";
        <script src="@path"></script>
    }
    <script type="text/javascript">

    var $table = $('#tablegrid')
    var $remove = $('#remove')
	    var selections = []
    var billLineNumber = 0
     
    function getIdSelections() {
        return $.map($table.bootstrapTable('getSelections'), function (row) {
            return row.id
        })
    }

    function responseHandler(res) {
        $.each(res.rows, function (i, row) {
            row.state = $.inArray(row.id, selections) !== -1
        })
        return res
    }
    function queryParams(params) {
        params.datafilter = document.getElementById("in_date").value;
        return params
    }

    function detailFormatter(index, row) {
        var html = []
        html.push('<table>')
        html.push('<thead>')
        html.push('<tr>')
        html.push('<th title="Код кассы">Код кассы</th>')
        html.push('<th title="Наименование услуги/товара">Наименование услуги/товара</th>')
        html.push('<th title="Кол-во">Кол-во</th>')
        html.push('<th title="Скидка">Скидка</th>')
        html.push('<th title="Цена продажи">Цена продажи</th>')
        html.push('<th title="Сумма">Сумма</th>')
        html.push('</tr>')
        html.push('</thead>')
        for (var i = 0; i < row.BillLines.length; i++)
        {
            html.push('<tr>')
            html.push('<td>' + row.BillLines[i].CashRegCode + '</td>')
            html.push('<td>' + row.BillLines[i].ServiceProductName + '</td>')
            html.push('<td>' + row.BillLines[i].Quantity + '</td>')
            html.push('<td>' + row.BillLines[i].Discount + '</td>')
            html.push('<td>' + row.BillLines[i].SellPrice + '</td>')
            html.push('<td>' + row.BillLines[i].Summ + '</td>')
            html.push('</tr>')
        }
        html.push('</table>')
    return html.join('')
    }

    function customSort(sortName, sortOrder, data)
    {
        var order = sortOrder === 'desc' ? -1 : 1;
        var tableOptions = $table.bootstrapTable('getOptions');
        var dataType = undefined;
        for (var i = 0; i < tableOptions.columns[1].length; i++)
        {
            if (tableOptions.columns[1][i].field == sortName)
            {
                dataType = tableOptions.columns[1][i].typeName;
            }
        }
        data.sort(function (a, b) {
            var aa = getItemField(a, sortName, tableOptions.escape);
            var bb = getItemField(b, sortName, tableOptions.escape);
            return sort(aa, bb, order, tableOptions.sortStable, dataType);
        })
    }
    function sort(a, b, order, sortStable, dataType) {
        if (a === undefined || a === null) {
            a = '';
        }

        if (b === undefined || b === null) {
            b = '';
        }

        if (sortStable && a === b) {
            a = a._position;
            b = b._position;
        } // If both values are numeric, do a numeric comparison


        if (this.isNumeric(a) && this.isNumeric(b)) {
            // Convert numerical values form string to float.
            a = parseFloat(a);
            b = parseFloat(b);

            if (a < b) {
                return order * -1;
            }

            if (a > b) {
                return order;
            }

            return 0;
        }

        if (a === b) {
            return 0;
        } // If value is not a string, convert to string

        if (dataType === 'Date')
        {
            var aa = new Date(fromLocalDate(a));
            var bb = new Date(fromLocalDate(b));

            if (aa < bb) {
                return order * -1;
            }

            if (aa > bb) {
                return order;
            }
            return 0;
        }
        if (typeof a !== 'string') {
            a = a.toString();
        }

        if (a.localeCompare(b) === -1) {
            return order * -1;
        }

        return order;
    }
    function fromLocalDate(date)
    {
        if (date == '')
        {
            return '0000-01-01'
        }
        var sampleDate = new Date('1976-08-02');
        var sampleString = sampleDate.toLocaleDateString()
        var startY = sampleString.indexOf(1);
        var endY = sampleString.indexOf(6);
        var m = sampleString.indexOf(8);
        var d = sampleString.indexOf(2);
        var year = date.substring(startY, endY + 1);
        var month = undefined;
        var day = undefined;
        if (date.substring(m - 1, m + 1).length == 1) {
            month = '0' + date.substring(m - 1, m + 1);
        }
        else {
            if (Number.isInteger(parseInt(date.substring(m - 1, m + 1)))) {
                month = date.substring(m - 1, m + 1);
            }
            else {
                month = '0' + date.substring(m, m + 1);
            }

        }
        if (date.substring(d - 1, d + 1).length == 1) {
            day = '0' + date.substring(d - 1, d + 1);
        }
        else {
            if (Number.isInteger(parseInt(date.substring(d - 1, d + 1)))) {
                day = date.substring(d - 1, d + 1);
            }
            else {
                day = '0' + date.substring(d, d + 1);
            }

        }
        return year + '-' + month + '-' + day
    }
    function isNumeric(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }
    function getItemField(item, field, escape) {
        var value = item;

        if (typeof field !== 'string' || item.hasOwnProperty(field)) {
            return escape ? this.escapeHTML(item[field]) : item[field];
        }

        var props = field.split('.');
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
            for (var _iterator7 = props[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                var p = _step7.value;
                value = value && value[p];
            }
        } catch (err) {
            _didIteratorError7 = true;
            _iteratorError7 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
                    _iterator7.return();
                }
            } finally {
                if (_didIteratorError7) {
                    throw _iteratorError7;
                }
            }
        }

        return escape ? this.escapeHTML(value) : value;
    }
        function operateFormatter(value, row, index) {
            if (row["Actual"] == 0)
                {
            return [
            '<div class="btn-group" aria-label="Toolbar with button groups">',
            '<button id="actual' + row.id + '" class="btn btn-outline-success" title="Действительный" onclick="actualize(this)" style="margin-right:10px" disabled>',
            '<i class="fas fa-check" aria-hidden="true"></i>',
            '</button>',
            '<button id="mistake' + row.id + '" class="btn btn-outline-danger" title="Ошибочный" onclick="actualize(this)">',
            '<i class="fa fa-trash" aria-hidden="true"></i>',
            '</button>',
            '</div>'
                ].join('')
            }
            else
            {
                return [
            '<div class="btn-group" aria-label="Toolbar with button groups">',
            '<button id="actual' + row.id + '" class="btn btn-outline-success" title="Действительный" onclick="actualize(this)" style="margin-right:10px">',
            '<i class="fas fa-check" aria-hidden="true"></i>',
            '</button>',
            '<button id="mistake' + row.id + '" class="btn btn-outline-danger" title="Ошибочный" onclick="actualize(this)" disabled>',
            '<i class="fa fa-trash" aria-hidden="true"></i>',
            '</button>',
            '</div>'
                ].join('')
            }
    }


    function totalTextFormatter(data) {
        return '@GlobalRes.Total'
    }

    function totalNameFormatter(data) {
        return data.length
    }

        function totalPriceFormatter(data) {
            var field = this.field
            return data.map(function (row) {
                return +row[field]
            }).reduce(function (sum, i) {
                return sum + i
            }, 0)
        }
    function runningFormatter(value, row, index) {

        var tableOptions = $table.bootstrapTable('getOptions');
        var result = index + 1
        if (tableOptions.sidePagination == 'server' & typeof (tableOptions.pageSize) === 'number') {
            result = ((tableOptions.pageNumber - 1) * tableOptions.pageSize) + (1 + index);
        }
        return result
    }

    function onSuccessFilter(data)
    {
        if (data.result == 'notValid') {
            showvalidationmessages(data.ModelState)
        }

        if (data.result == 'success') {
            filter = data.dataFilter;
            setFilters(data);
        }
    }
    function onSuccessEdit(data) {
        if (data.result == 'success') {
            updateRow(data.data);
            $('#windowmodal').modal('hide');
        }
        else
        {
            document.getElementById('EditForm').setAttribute('was-validated', '');
        }
        }
        function actualizeRow(data) {

            updateRow(data.data);
        }

    function onSuccessCreate(data) {
        if (data.result == 'success') {
            $table.bootstrapTable('insertRow', { index: 0, row: data.data })
            $('#windowmodal').modal('hide');
        }
        else {
            document.getElementById('CreateForm').setAttribute('was-validated', '');
        }
    }
    function updateRow(data) {
        $table.bootstrapTable('updateByUniqueId', {
            id: data.id,
            row: data,
            replace: true
        })
    }
    function deleteRow(data) {
        $('#windowmodal').modal('hide');
        if (data.result === 'success') {
            $table.bootstrapTable('removeByUniqueId', data.value);
        }
        else
        {
            alert(data.message);
        }
    }

    function onEditOpen() {
        if (Modernizr.es5date) {
            // supported
            var inputs = document.querySelectorAll("input[type=date]");
            for (var index = 0; index < inputs.length; index++) {
                if (inputs[index].defaultValue != undefined || inputs[index].defaultValue != '')
                    inputs[index].value = fromLocalDate(inputs[index].defaultValue);
            }

        } else {
            // not-supported
        }
    }

    function setFilters(data)
    {

        $('#sidebar').toggleClass('active');
        $('.navbar').toggleClass('moveright');

        setTimeout(function () {
            if (data.ServerSide == true) {
                $table.bootstrapTable('refreshOptions', {
                    sidePagination: 'server'
                })
                $table.bootstrapTable('refresh');
           }
            else {
                $table.bootstrapTable('refreshOptions', {
                    sidePagination: 'client'
                })
                $table.bootstrapTable('refresh');
                }
        }, 100);


        }
        
    function telInput(sender) {
        if (sender.value.length == 10 & !isNaN(sender.value)) {
            sender.value = '(' + sender.value.substring(0, 3) + ') ' + sender.value.substring(3, 6) + '-' + sender.value.substring(6, 8) + '-' + sender.value.substring(8, 10);
        }
    }

 $("document").ready(function () {
        var currDate = new Date();
        var day = currDate.getDate().toString();
        day = day.length === 1 ? '0' + day : day;
        var month = (currDate.getMonth() + 1).toString();
        month = month.length === 1 ? '0' + month : month;
        $('#in_date').val(currDate.getFullYear() + '-' + month + '-' + day);
        document.title = currDate.getFullYear() + '-' + month + '-' + day + ' Счета';
        currDate.setDate(currDate.getDate() - 1);
        day = currDate.getDate().toString();
        day = day.length === 1 ? '0' + day : day;
        month = (currDate.getMonth() + 1).toString();
        month = month.length === 1 ? '0' + month : month;
        $('#start').val(currDate.getFullYear() + '-' + month + '-' + day);
        $('#end').val(currDate.getFullYear() + '-' + month + '-' + day);
                $table.bootstrapTable();
                
                $('#in_date').on('change', function () {
                    $table.bootstrapTable('refresh');
                    document.title = this.value + ' Счета';
                })
        $('#sidebarCollapse').on('click', function () {
            $('#sidebar').toggleClass('active');
            $('.navbar').toggleClass('moveright');

            $('.filter-select').selectpicker();
        });
        $("document").on('resize', function () {
            $('#tablegrid').bootstrapTable('resetView');
        });
        $table.on('check.bs.table uncheck.bs.table ' +
            'check-all.bs.table uncheck-all.bs.table',
            function () {
                if (!$table.bootstrapTable('getSelections').length)
                {
                    $remove.prop('disabled', true)
                    $remove.prop('class', 'btn btn-danger')
					                }
                else
                 {
                    $remove.prop('disabled', false)
                    $remove.prop('class', 'btn btn-outline-danger')

                }
                // save your data, here just save the current page
                selections = getIdSelections()
                // push or splice the selections if you want to save all data selections
            })
        $table.on('all.bs.table', function (e, name, args) {
            console.log(name, args)
        })
        $remove.click(function () {
            var ids = getIdSelections()
            if (confirm("@GlobalRes.DeleteConfirm\n" + ids.length + "@GlobalRes.Rows"))
            {
                var form = $('#__AjaxAntiForgeryForm');
                var token = $('input[name="__RequestVerificationToken"]', form).val();
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("DeleteList", "CheckBills")",
                    data: {
                        __RequestVerificationToken: token,
                        ids: ids
                    },
                    success: function (data) {
                        if (data.result === 'success')
                        {
                            $remove.prop('disabled', true)
                            $remove.prop('class', 'btn btn-danger')
							                            $table.bootstrapTable('remove', {
                                field: 'id',
                                values: ids
                            })
                        }
                        else
                        {
                            alert(data.message)
                        }
                    }
                })

            }

        })
		})
	 function getProp(obj, prop) {
				if (typeof obj !== 'object') throw 'getProp: obj is not an object';
				if (typeof prop !== 'string') throw 'getProp: prop is not a string';

				// Replace [] notation with dot notation
				prop = prop.replace(/\[["'`](.*)["'`]\]/g, ".$1");

				return prop.split('.').reduce(function (prev, curr) {
					return prev ? prev[curr] : undefined
				}, obj || self)
			}

    function showvalidationmessages(modelstate)
    {

        }
        function addBillLine() {
            
            var my_elem = document.getElementById('buttonAddBillLine');

            var div = document.createElement('div');
            billLineNumber = billLineNumber + 1;
            div.id = 'billdivline' + billLineNumber;
            div.innerHTML = ['<div class="form-group col-md-2">',
                '<input type="text" name="BillLines[' + billLineNumber + '].CashRegCode" class="form-control text-box single-line" />',
                    '<div class="invalid-feedback">',
                    '</div>',
                    '</div>',
                    '<div class="form-group col-md-4">',
                    '<input type="text" name="BillLines[' + billLineNumber + '].ServiceProductName" list="serviceList" class="form-control text-box single-line" />',
                    '<div class="invalid-feedback">',
                    '</div>',
                    '</div>',
                    '<div class="form-group col-md-2">',
                    '<input type="text" name="BillLines[' + billLineNumber + '].Quantity" class="form-control text-box single-line" />',
                    '<div class="invalid-feedback">',
                    '</div>',
                    '</div>',
                    '<div class="form-group col-md-2">',
                    '<input type="text" name="BillLines[' + billLineNumber + '].SellPrice" class="form-control text-box single-line" />',
                    '<div class="invalid-feedback">',
                    '</div>',
                    '</div>',
                    '<div class="form-group col-md-2">',
                    '<select class="form-control" name="BillLines[' + billLineNumber + '].Discount">',
                        '<option value="">Нет</option>',
                        '<option value="10%">10%</option>',
                        '<option value="c">Сотрудник</option>',
                    '</select>',
                    '<div class="invalid-feedback">',
                    '</div>',
                    '</div>'].join('');
                div.className = 'form-row';

                my_elem.parentNode.insertBefore(div, my_elem);
            
        }
        function removeBillLine() {
            if (billLineNumber != 0)
            {
                var element = document.getElementById('billdivline' + billLineNumber);
                element.parentNode.removeChild(element);
                billLineNumber = billLineNumber - 1;
            }
        }

        function cellStyle(value, row, index, field) {
            if (row.Actual > 0)
            {
                return {
                    classes: 'bg-danger'
                }
            }
            if (row.BO === 'Да') {
                return {
                    classes: 'bg-warning'
                }
            }
            return {
                css: {
                    color: 'black'
                }
            }
        }
        function actualize(button) {
            if (button.id.substring(0, 6) == 'actual') {
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("Actual", "CheckBills")",
                    data: {

                        id: button.id.substring(6)
                    },
                    success: actualizeRow

                })
            } else if (button.id.substring(0, 7) == 'mistake')
            {
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("Mistake", "CheckBills")",
                    data: {

                        id: button.id.substring(7)
                    },
                    success: actualizeRow

                })
            }
            
        }

    </script>
}
