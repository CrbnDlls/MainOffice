<#@ template language="C#" HostSpecific="True" Debug="True"#>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
<# //Debugger.Launch(); 
#>
@model <#= ViewDataTypeName #>
@using MainOffice.App_LocalResources
@using MainOffice.Helpers
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = GlobalRes.Create + " " + Html.DisplayCustomForModel("Name").ToString();
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@GlobalRes.Edit @Html.DisplayCustomForModel("Name").ToString()</title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>

<#
}
#>
<div class="modal-header">
    <h5 class="modal-title">@String.Concat(new string[]{Html.DisplayCustomForModel("Name").ToString(), " - ",GlobalRes.Edit})</h5>
    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>
@using (Ajax.BeginForm("Edit", null, new AjaxOptions { OnSuccess = "onSuccessEdit", UpdateTargetId = "modalform", LoadingElementId = "editLoading", OnFailure = "failSave" }, new { id = "EditForm" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
	if (ViewBag.Concurrency)
    {
        <script type="text/javascript">
        refreshRow(@Model.Id);
        </script>
        @Html.ActionLink(GlobalRes.Edit, "Index", new { Edit = Model.Id }, new { @class = "btn btn-outline-warning", target="_blank" })
    }
    <hr class="border border-primary" />

<#
int Count = 3;
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !(property.IsAutoGenerated && !property.IsConcurrencyProperty) && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }
        if (T4Helpers.IsHidden(ViewDataTypeName, property.PropertyName))
        {#>
			@Html.HiddenFor(model => model.<#= property.PropertyName #>)
		<# continue;
		}
		if (Count % 3 == 0) {
#>
        <div class="form-row">
<#} #>
		<div class="form-group col">
<#		string PropertyDataType = T4Helpers.GetDataTypeName(ViewDataTypeName, property.PropertyName);
		bool isCheckbox = property.TypeName.Equals(boolType);
		 
            if (isControlHtmlAttributesSupported) {
#>				@Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label" })
<#
            } else {
#>				@Html.LabelFor(model => model.<#= property.PropertyName #>)
<#
            }
        if (property.IsForeignKey) {
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
                @Html.ValidationDropDownListFor(model => model.<#= property.PropertyName #>, null, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                @Html.ValidationDropDownListFor(model => model.<#= property.PropertyName #>, String.Empty)
<#
            }
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
                <div class="checkbox">
<#
                PushIndent("    ");
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                @Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else if (PropertyDataType == "PhoneNumber") {
#>
                 @Html.ValidationEditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control", placeholder = "(0XX) XXX-XX-XX", oninput = "telInput(this)" } })
<#
            } else if (PropertyDataType == "Date") {
#>
                 @Html.ValidationEditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
            } else {
#>
                @Html.ValidationEditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
            } 
        } else {
#>
                @Html.ValidationEditorFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
<div class="invalid-feedback">
<# 
        if (isControlHtmlAttributesSupported) {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
        } else {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
        }
#>
<#
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
                </div>
<#
        }
#>
            </div>
        </div>
		<# if (Count % 3 == 2) { #>
</div>
                    <hr class="border border-primary" /><#
		 }
	 Count++;
	}
	
}
if ((Count-1) % 3 != 2) { #>
</div>
                    <hr class="border border-primary" />
<# } #>	
<div class="modal-footer">
                        <button type="submit" class="btn btn-outline-success" @(ViewBag.Concurrency ? "disabled":"")><i class="fas fa-spinner fa-pulse" style="display:none" id="editLoading"></i> @GlobalRes.Save</button>
                        <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">@GlobalRes.Close</button>
                    </div>
}
<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>